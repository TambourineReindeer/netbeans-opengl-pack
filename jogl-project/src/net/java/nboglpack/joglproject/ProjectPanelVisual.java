package net.java.nboglpack.joglproject;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class ProjectPanelVisual extends JPanel implements DocumentListener
{
	
	public static final String PROP_PROJECT_NAME = "projectName";
	public static final String PROP_PROJECT_PACKAGE = "projectPackage";
	
	private ProjectWizardPanel panel;
	private int type;
	
	/** Creates new form PanelProjectLocationVisual */
	public ProjectPanelVisual(ProjectWizardPanel panel)
	{
		initComponents();
		this.panel = panel;
		this.type = type;
		// Register listener on the textFields to make the automatic updates
		projectNameTextField.getDocument().addDocumentListener(this);
		projectLocationTextField.getDocument().addDocumentListener(this);
		projectPackageTextField.getDocument().addDocumentListener(this);
	}
	
	
	public String getProjectName()
	{
		return this.projectNameTextField.getText();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    projectNameLabel = new javax.swing.JLabel();
    projectNameTextField = new javax.swing.JTextField();
    projectLocationLabel = new javax.swing.JLabel();
    projectLocationTextField = new javax.swing.JTextField();
    browseButton = new javax.swing.JButton();
    createdFolderLabel = new javax.swing.JLabel();
    createdFolderTextField = new javax.swing.JTextField();
    projectPackageLabel = new javax.swing.JLabel();
    projectPackageTextField = new javax.swing.JTextField();
    createdMainClassLabel = new javax.swing.JLabel();
    createdMainClassTextField = new javax.swing.JTextField();
    createdMainClassLabel1 = new javax.swing.JLabel();
    platformDropDown = new javax.swing.JComboBox();
    platformHint = new javax.swing.JTextArea();

    projectNameLabel.setLabelFor(projectNameTextField);
    org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, "Project &Name:");

    projectLocationLabel.setLabelFor(projectLocationTextField);
    org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, "Project &Location:");

    org.openide.awt.Mnemonics.setLocalizedText(browseButton, "Br&owse...");
    browseButton.setActionCommand("BROWSE");
    browseButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        browseButtonActionPerformed(evt);
      }
    });

    createdFolderLabel.setLabelFor(createdFolderTextField);
    org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, "Project &Folder:");

    createdFolderTextField.setEditable(false);

    projectPackageLabel.setLabelFor(projectNameTextField);
    org.openide.awt.Mnemonics.setLocalizedText(projectPackageLabel, "Project Package:");

    createdMainClassLabel.setLabelFor(createdFolderTextField);
    org.openide.awt.Mnemonics.setLocalizedText(createdMainClassLabel, "Main Class:");

    createdMainClassTextField.setEditable(false);

    createdMainClassLabel1.setLabelFor(createdFolderTextField);
    org.openide.awt.Mnemonics.setLocalizedText(createdMainClassLabel1, "Platform:");

    platformDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Windows (I586)", "Linux (I586)", "Linux (AMD64)", "MacOS X (UNIVERSAL)", "MacOS X (PPC)", "Solaris (Sparc)", "Solaris (Sparc V9)", "Solaris (I586)" }));

    platformHint.setColumns(20);
    platformHint.setEditable(false);
    platformHint.setLineWrap(true);
    platformHint.setRows(5);
    platformHint.setText("This is the platform of your development system. You can generate distributions for all supported platforms.");
    platformHint.setWrapStyleWord(true);
    platformHint.setOpaque(false);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(projectNameLabel)
          .add(projectLocationLabel)
          .add(createdFolderLabel)
          .add(projectPackageLabel)
          .add(createdMainClassLabel)
          .add(createdMainClassLabel1))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(platformDropDown, 0, 357, Short.MAX_VALUE)
          .add(createdMainClassTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
          .add(projectPackageTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, projectNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, projectLocationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, createdFolderTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
          .add(platformHint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 357, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(browseButton)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(projectNameLabel)
          .add(projectNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(projectLocationLabel)
          .add(projectLocationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(browseButton))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(createdFolderLabel)
          .add(createdFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(projectPackageLabel)
          .add(projectPackageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(createdMainClassLabel)
          .add(createdMainClassTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(platformDropDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(createdMainClassLabel1))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(platformHint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, Short.MAX_VALUE)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents
	
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
			String command = evt.getActionCommand();
			if ("BROWSE".equals(command))
			{
				JFileChooser chooser = new JFileChooser();
				FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
				chooser.setDialogTitle("Select Project Location");
				chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				String path = this.projectLocationTextField.getText();
				if (path.length() > 0)
				{
					File f = new File(path);
					if (f.exists())
					{
						chooser.setSelectedFile(f);
					}
				}
				if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this))
				{
					File projectDir = chooser.getSelectedFile();
					projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
				}
				panel.fireChangeEvent();
			}
			
    }//GEN-LAST:event_browseButtonActionPerformed
		
		
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton browseButton;
  private javax.swing.JLabel createdFolderLabel;
  private javax.swing.JTextField createdFolderTextField;
  private javax.swing.JLabel createdMainClassLabel;
  private javax.swing.JLabel createdMainClassLabel1;
  private javax.swing.JTextField createdMainClassTextField;
  private javax.swing.JComboBox platformDropDown;
  private javax.swing.JTextArea platformHint;
  private javax.swing.JLabel projectLocationLabel;
  private javax.swing.JTextField projectLocationTextField;
  private javax.swing.JLabel projectNameLabel;
  private javax.swing.JTextField projectNameTextField;
  private javax.swing.JLabel projectPackageLabel;
  private javax.swing.JTextField projectPackageTextField;
  // End of variables declaration//GEN-END:variables
	
	public void addNotify()
	{
		super.addNotify();
		//same problem as in 31086, initial focus on Cancel button
		projectNameTextField.requestFocus();
	}
	
	boolean valid(WizardDescriptor wizardDescriptor)
	{
		boolean errors= false;
		if (projectNameTextField.getText().length() == 0)
		{
			wizardDescriptor.putProperty("WizardPanel_errorMessage",
				"Project Name is not a valid folder name.");
			errors= true; //Display name not specified
		}
		if (!projectPackageTextField.getText().matches("^[\\w\\.]+$"))
		{
			wizardDescriptor.putProperty("WizardPanel_errorMessage",
				"Project package is not a valid package name.");
			errors= true; // Display name not specified
		}
		if(errors) return false;
		
		File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
		if (!f.isDirectory())
		{
			String message = "Project Folder is not a valid path.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false;
		}
		final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
		
		File projLoc = destFolder;
		while (projLoc != null && !projLoc.exists())
		{
			projLoc = projLoc.getParentFile();
		}
		if (projLoc == null || !projLoc.canWrite())
		{
			wizardDescriptor.putProperty("WizardPanel_errorMessage",
				"Project Folder cannot be created.");
			return false;
		}
		
		if (FileUtil.toFileObject(projLoc) == null)
		{
			String message = "Project Folder is not a valid path.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false;
		}
		
		File[] kids = destFolder.listFiles();
		if (destFolder.exists() && kids != null && kids.length > 0)
		{
			// Folder exists and is not empty
			wizardDescriptor.putProperty("WizardPanel_errorMessage",
				"Project Folder already exists and is not empty.");
			return false;
		}
		wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
		return true;
	}
	
	void store(WizardDescriptor d)
	{
		String name = projectNameTextField.getText().trim();
		String packageName = projectPackageTextField.getText().trim();
		String folder = createdFolderTextField.getText().trim();
		
		char[] chars= name.replaceAll("\\W+"," ").toCharArray();
		String mainClass="";
		char lastChar=' ';
		for (int i = 0; i < chars.length; i++)
		{
			if(lastChar==' ')
				mainClass+=Character.toUpperCase(chars[i]);
			else if(chars[i]!=' ')
				mainClass+=chars[i];
			lastChar=chars[i];
		}
		
		d.putProperty("projdir", new File(folder));
		d.putProperty("name", name);
		d.putProperty("projpackage", packageName);
		d.putProperty("projclass", mainClass);
		d.putProperty("platform", new Integer(platformDropDown.getSelectedIndex()==-1?0:platformDropDown.getSelectedIndex()));
	}
	
	void read(WizardDescriptor settings)
	{
		File projectLocation = (File) settings.getProperty("projdir");
		if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory())
		{
			projectLocation = ProjectChooser.getProjectsFolder();
		}
		else
		{
			projectLocation = projectLocation.getParentFile();
		}
		this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
		
		String projectPackage = (String) settings.getProperty("projpackage");
		if(projectPackage == null)
		{
			projectPackage = "org.yourorghere";
		}
		this.projectPackageTextField.setText(projectPackage);
		
		Integer platform = (Integer) settings.getProperty("platform");
		if(platform == null)
		{
				String osName = System.getProperty("os.name","");
				// Mac Os X
        if(osName.indexOf("Mac OS X")!=-1)
				{
					platform= new Integer(3);
				}
				// Windows
				else if(osName.indexOf("Windows")!=-1)
				{
					platform= new Integer(0);
				}
				// Linux
				else if(osName.indexOf("Linux")!=-1)
				{
					platform= new Integer(1);
				}
				// Solaris ?
				else if(osName.indexOf("Solaris")!=-1)
				{
					platform= new Integer(5);
				}
				else
				{
					platform= new Integer(0);
				}
		}
		this.platformDropDown.setSelectedIndex(platform.intValue());

		String projectName = (String) settings.getProperty("name");
		if(projectName == null)
		{
			projectName = "JOGLApp";
		}
		this.projectNameTextField.setText(projectName);
		this.projectNameTextField.selectAll();
	}
	
	void validate(WizardDescriptor d) throws WizardValidationException
	{
		// nothing to validate
	}
	
	// Implementation of DocumentListener --------------------------------------
	
	public void changedUpdate(DocumentEvent e)
	{
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
		}
		if (this.projectPackageTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_PACKAGE,null,this.projectPackageTextField.getText());
		}
	}
	
	public void insertUpdate(DocumentEvent e)
	{
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
		}
		if (this.projectPackageTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_PACKAGE,null,this.projectPackageTextField.getText());
		}
	}
	
	public void removeUpdate(DocumentEvent e)
	{
		updateTexts(e);
		if (this.projectNameTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
		}
		if (this.projectPackageTextField.getDocument() == e.getDocument())
		{
			firePropertyChange(PROP_PROJECT_PACKAGE,null,this.projectPackageTextField.getText());
		}
	}
	
	/** Handles changes in the Project name and project directory, */
	private void updateTexts(DocumentEvent e)
	{
		
		Document doc = e.getDocument();
		
		if (doc == projectPackageTextField.getDocument() || doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument())
		{
			// Change in the project name
			
			String projectName = projectNameTextField.getText();
			String projectFolder = projectLocationTextField.getText();
			String projectPackage = projectPackageTextField.getText();
			
			//if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
			createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
			//}

			char[] chars= projectName.replaceAll("\\W+"," ").toCharArray();
			String mainClass="";
			char lastChar=' ';
			for (int i = 0; i < chars.length; i++)
			{
				if(lastChar==' ')
					mainClass+=Character.toUpperCase(chars[i]);
				else if(chars[i]!=' ')
					mainClass+=chars[i];
				lastChar=chars[i];
			}
			
			createdMainClassTextField.setText(projectPackage + "." + mainClass);
		}
		panel.fireChangeEvent(); // Notify that the panel changed
	}
}
